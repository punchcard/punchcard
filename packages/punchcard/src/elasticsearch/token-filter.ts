export enum TokenFilter {
  /**
   * Strips all characters after an apostrophe, including the apostrophe itself.
   *
   * @see https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-apostrophe-tokenfilter.html
   */
  apostrophe = 'apostrophe',

  /**
   * Converts alphabetic, numeric, and symbolic characters that are not in the Basic Latin Unicode block (first 127 ASCII characters) to their ASCII equivalent, if one exists. For example, the filter changes `à` to `a`.
   *
   * @see https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-asciifolding-tokenfilter.html
   */
  asciifolding = 'asciifolding',

  /**
   * Forms bigrams out of CJK (Chinese, Japanese, and Korean) tokens.
   *
   * @see https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-cjk-bigram-tokenfilter.html
   */
  cjk_bigram = 'cjk_bigram',

  /**
   * Normalizes width differences in CJK (Chinese, Japanese, and Korean) characters as follows:
   * - Folds full-width ASCII character variants into the equivalent basic Latin characters
   * - Folds half-width Katakana character variants into the equivalent Kana characters
   *
   * @see https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-cjk-width-tokenfilter.html
   */
  cjk_width = 'cjk_width',

  /**
   * Performs optional post-processing of terms generated by the classic tokenizer.
   *
   * This filter removes the english possessive ('s) from the end of words and removes dots from acronyms. It uses Lucene’s [ClassicFilter](https://lucene.apache.org/core/8_5_1/analyzers-common/org/apache/lucene/analysis/standard/ClassicFilter.html).
   *
   * @see https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-classic-tokenfilter.html
   * @see https://lucene.apache.org/core/8_5_1/analyzers-common/org/apache/lucene/analysis/standard/ClassicFilter.html
   */
  classic = 'classic',

  /**
   * Generates bigrams for a specified set of common words.
   *
   * For example, you can specify is and the as common words. This filter then converts the tokens `[the, quick, fox, is, brown]` to `[the, the_quick, quick, fox, fox_is, is, is_brown, brown]`.
   *
   * You can use the `common_grams` filter in place of the [stop token filter](https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-stop-tokenfilter.html) when you don’t want to completely ignore common words.
   *
   * This filter uses Lucene’s [CommonGramsFilter](https://lucene.apache.org/core/8_5_1/analyzers-common/org/apache/lucene/analysis/commongrams/CommonGramsFilter.html).
   *
   * @see https://lucene.apache.org/core/8_5_1/analyzers-common/org/apache/lucene/analysis/commongrams/CommonGramsFilter.html
   * @see https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-common-grams-tokenfilter.html
   */
  common_grams = 'common_grams'
}

export type TokenFilterCustomization =
  | AsciiFoldingCustomization
;

export interface AsciiFoldingCustomization {
  type: TokenFilter.apostrophe;
  /**
   * If true, emit both original tokens and folded tokens. Defaults to false.
   *
   * @default false
   */
  preserve_original?: boolean;
}

export interface CjkBigramCustomization {
  type: TokenFilter.cjk_bigram;
  /**
   * Array of character scripts for which to disable bigrams. Possible values:
   * - `han`
   * - `hangul`
   * - `hiragana`
   * - `katakana`
   *
   * All non-CJK input is passed through unmodified.
   */
  ignored_scripts?:
    | 'han'
    | 'hangul'
    | 'hiragana'
    | 'katakana'
  ;
  /**
   * If true, emit tokens in both bigram and unigram form. If false, a CJK character is output in unigram form when it has no adjacent characters. Defaults to false.
   */
  output_unigrams?: boolean;
}

export interface CommonGrantsCustomization {
  type: TokenFilter.common_grams;

  /**
   * (Required*, array of strings) A list of tokens. The filter generates bigrams for these tokens.
   *
   * Either this or the common_words_path parameter is required.
   */
  common_words: string[];

  /**
   * (Required*, string) Path to a file containing a list of tokens. The filter generates bigrams for these tokens.
   *
   * This path must be absolute or relative to the config location. The file must be UTF-8 encoded. Each token in the file must be separated by a line break.
   *
   * Either this or the common_words parameter is required.
   */
  common_words_path: string;

  /**
   * If true, matches for common words matching are case-insensitive. Defaults to false.
   *
   * @default false
   */
  ignore_case?: boolean;
  /**
   * If true, the filter excludes the following tokens from the output:
   * - Unigrams for common words
   * - Unigrams for terms followed by common words
   *
   * Defaults to `false`. We recommend enabling this parameter for search analyzers.
   *
   * For example, you can enable this parameter and specify is and the as common words. This filter converts the tokens `[the, quick, fox, is, brown]` to `[the_quick, quick, fox_is, is_brown]`.
   *
   * @default false
   */
  query_mode?: boolean;
}