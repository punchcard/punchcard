// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`data-lake stack data-lake should match snapshot 1`] = `
Object {
  "Resources": Object {
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": Object {
      "Properties": Object {
        "Code": Object {
          "ZipFile": "exports.handler = (event, context) => {
    // eslint-disable-next-line @typescript-eslint/no-require-imports, import/no-extraneous-dependencies
    const s3 = new (require('aws-sdk').S3)();
    // eslint-disable-next-line @typescript-eslint/no-require-imports
    const https = require('https');
    // eslint-disable-next-line @typescript-eslint/no-require-imports
    const url = require('url');
    log(JSON.stringify(event, undefined, 2));
    const props = event.ResourceProperties;
    if (event.RequestType === 'Delete') {
        props.NotificationConfiguration = {}; // this is how you clean out notifications
    }
    const req = {
        Bucket: props.BucketName,
        NotificationConfiguration: props.NotificationConfiguration,
    };
    return s3.putBucketNotificationConfiguration(req, (err, data) => {
        log({ err, data });
        if (err) {
            return submitResponse('FAILED', err.message + \`\\\\nMore information in CloudWatch Log Stream: \${context.logStreamName}\`);
        }
        else {
            return submitResponse('SUCCESS');
        }
    });
    function log(obj) {
        console.error(event.RequestId, event.StackId, event.LogicalResourceId, obj);
    }
    // tslint:disable-next-line:max-line-length
    // adapted from https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html#cfn-lambda-function-code-cfnresponsemodule
    // to allow sending an error messge as a reason.
    function submitResponse(responseStatus, reason) {
        const responseBody = JSON.stringify({
            Status: responseStatus,
            Reason: reason || 'See the details in CloudWatch Log Stream: ' + context.logStreamName,
            PhysicalResourceId: event.PhysicalResourceId || event.LogicalResourceId,
            StackId: event.StackId,
            RequestId: event.RequestId,
            LogicalResourceId: event.LogicalResourceId,
            NoEcho: false,
        });
        log({ responseBody });
        const parsedUrl = url.parse(event.ResponseURL);
        const options = {
            hostname: parsedUrl.hostname,
            port: 443,
            path: parsedUrl.path,
            method: 'PUT',
            headers: {
                'content-type': '',
                'content-length': responseBody.length,
            },
        };
        const request = https.request(options, (r) => {
            log({ statusCode: r.statusCode, statusMessage: r.statusMessage });
            context.done();
        });
        request.on('error', (error) => {
            log({ sendError: error });
            context.done();
        });
        request.write(responseBody);
        request.end();
    }
};",
        },
        "Description": "AWS CloudFormation handler for \\"Custom::S3BucketNotifications\\" resources (@aws-cdk/aws-s3)",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn",
          ],
        },
        "Runtime": "nodejs10.x",
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": Array [
          Object {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DummyDataPointsAllowEventRuledatalakeDummyDataPointsScheduleF68FC4E142FAF5F6": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DummyDataPointsE5E16468",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "DummyDataPointsSchedule65A46D54",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DummyDataPointsE5E16468": Object {
      "Properties": Object {
        "Code": Object {
          "ZipFile": "exports.handler = function(){ throw new Error(\\"Mocked code is running, oops!\\");}",
        },
        "Environment": Object {
          "Variables": Object {
            "entrypoint_id": "4",
            "is_runtime": "true",
            "punchcard_streamName": Object {
              "Ref": "LakeDatabasedataPointsStreamF9D85971",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "DummyDataPointsServiceRoleB15DAC9D",
            "Arn",
          ],
        },
        "Runtime": "nodejs10.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "DummyDataPointsSchedule65A46D54": Object {
      "Properties": Object {
        "ScheduleExpression": "rate(1 minute)",
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "DummyDataPointsE5E16468",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "DummyDataPointsServiceRoleB15DAC9D": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DummyDataPointsServiceRoleDefaultPolicy4F10122A": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "kinesis:ListShards",
                "kinesis:PutRecord",
                "kinesis:PutRecords",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "LakeDatabasedataPointsStreamF9D85971",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "LakeDatabasedataPointsStreamKey6D78F220",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DummyDataPointsServiceRoleDefaultPolicy4F10122A",
        "Roles": Array [
          Object {
            "Ref": "DummyDataPointsServiceRoleB15DAC9D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ForEachDataPoint3838832C": Object {
      "Properties": Object {
        "Code": Object {
          "ZipFile": "exports.handler = function(){ throw new Error(\\"Mocked code is running, oops!\\");}",
        },
        "Environment": Object {
          "Variables": Object {
            "entrypoint_id": "3",
            "is_runtime": "true",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "ForEachDataPointServiceRole11B2F00E",
            "Arn",
          ],
        },
        "Runtime": "nodejs10.x",
        "Timeout": 10,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ForEachDataPointKinesisEventSourcedatalakeLakeDatabasedataPointsStreamCC89A340AE3B311E": Object {
      "Properties": Object {
        "BatchSize": 100,
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "LakeDatabasedataPointsStreamF9D85971",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Ref": "ForEachDataPoint3838832C",
        },
        "StartingPosition": "TRIM_HORIZON",
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "ForEachDataPointServiceRole11B2F00E": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ForEachDataPointServiceRoleDefaultPolicyECA5D450": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "kinesis:DescribeStreamSummary",
                "kinesis:GetRecords",
                "kinesis:GetShardIterator",
                "kinesis:ListShards",
                "kinesis:SubscribeToShard",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "LakeDatabasedataPointsStreamF9D85971",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "kms:Decrypt",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "LakeDatabasedataPointsStreamKey6D78F220",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "kinesis:DescribeStream",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "LakeDatabasedataPointsStreamF9D85971",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ForEachDataPointServiceRoleDefaultPolicyECA5D450",
        "Roles": Array [
          Object {
            "Ref": "ForEachDataPointServiceRole11B2F00E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LakeDatabase6CA13201": Object {
      "Properties": Object {
        "CatalogId": Object {
          "Ref": "AWS::AccountId",
        },
        "DatabaseInput": Object {
          "Name": "my_lake",
        },
      },
      "Type": "AWS::Glue::Database",
    },
    "LakeDatabasedataPointsBucketB080069E": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "aws:kms",
              },
            },
          ],
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "LakeDatabasedataPointsStreamF9D85971": Object {
      "Properties": Object {
        "RetentionPeriodHours": 24,
        "ShardCount": 1,
        "StreamEncryption": Object {
          "EncryptionType": "KMS",
          "KeyId": Object {
            "Fn::GetAtt": Array [
              "LakeDatabasedataPointsStreamKey6D78F220",
              "Arn",
            ],
          },
        },
      },
      "Type": "AWS::Kinesis::Stream",
    },
    "LakeDatabasedataPointsStreamKey6D78F220": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "Description": "Created by data-lake/Lake/Database/dataPoints/Stream",
        "KeyPolicy": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion",
                "kms:GenerateDataKey",
                "kms:TagResource",
                "kms:UntagResource",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
            Object {
              "Action": "kms:Decrypt",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::GetAtt": Array [
                    "LakeDatabasedataPointsToS3DeliveryStreamKinesisRole95E2FA2F",
                    "Arn",
                  ],
                },
              },
              "Resource": "*",
            },
            Object {
              "Action": "kms:Decrypt",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::GetAtt": Array [
                    "ForEachDataPointServiceRole11B2F00E",
                    "Arn",
                  ],
                },
              },
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::GetAtt": Array [
                    "DummyDataPointsServiceRoleB15DAC9D",
                    "Arn",
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": "Retain",
    },
    "LakeDatabasedataPointsToGlueTableF86F6D7D": Object {
      "Properties": Object {
        "CatalogId": Object {
          "Ref": "AWS::AccountId",
        },
        "DatabaseName": Object {
          "Ref": "LakeDatabase6CA13201",
        },
        "TableInput": Object {
          "Description": "data_points generated by CDK",
          "Name": "data_points",
          "Parameters": Object {
            "has_encrypted_data": false,
          },
          "PartitionKeys": Array [
            Object {
              "Name": "year",
              "Type": "smallint",
            },
            Object {
              "Name": "month",
              "Type": "smallint",
            },
            Object {
              "Name": "day",
              "Type": "smallint",
            },
            Object {
              "Name": "hour",
              "Type": "smallint",
            },
            Object {
              "Name": "minute",
              "Type": "smallint",
            },
          ],
          "StorageDescriptor": Object {
            "Columns": Array [
              Object {
                "Name": "key",
                "Type": "string",
              },
              Object {
                "Name": "value",
                "Type": "char(10)",
              },
              Object {
                "Name": "data_points",
                "Type": "array<int>",
              },
              Object {
                "Name": "timestamp",
                "Type": "timestamp",
              },
            ],
            "Compressed": false,
            "InputFormat": "org.apache.hadoop.mapred.TextInputFormat",
            "Location": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "s3://",
                  Object {
                    "Ref": "LakeDatabasedataPointsBucketB080069E",
                  },
                  "/data_points/",
                ],
              ],
            },
            "OutputFormat": "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
            "SerdeInfo": Object {
              "SerializationLibrary": "org.openx.data.jsonserde.JsonSerDe",
            },
            "StoredAsSubDirectories": false,
          },
          "TableType": "EXTERNAL_TABLE",
        },
      },
      "Type": "AWS::Glue::Table",
    },
    "LakeDatabasedataPointsToGlueToTable3427B72C": Object {
      "Properties": Object {
        "Code": Object {
          "ZipFile": "exports.handler = function(){ throw new Error(\\"Mocked code is running, oops!\\");}",
        },
        "Environment": Object {
          "Variables": Object {
            "entrypoint_id": "2",
            "is_runtime": "true",
            "punchcard_bucketName": Object {
              "Ref": "LakeDatabasedataPointsToS3DeliveryStreamBucket621E10D3",
            },
            "punchcard_bucket_bucketName": Object {
              "Ref": "LakeDatabasedataPointsBucketB080069E",
            },
            "punchcard_catalogId": Object {
              "Ref": "AWS::AccountId",
            },
            "punchcard_databaseName": Object {
              "Ref": "LakeDatabase6CA13201",
            },
            "punchcard_tableName": Object {
              "Ref": "LakeDatabasedataPointsToGlueTableF86F6D7D",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "LakeDatabasedataPointsToGlueToTableServiceRole67CA1129",
            "Arn",
          ],
        },
        "Runtime": "nodejs10.x",
        "Timeout": 10,
      },
      "Type": "AWS::Lambda::Function",
    },
    "LakeDatabasedataPointsToGlueToTableAllowBucketNotificationsFromdatalakeLakeDatabasedataPointsToS3DeliveryStreamBucketF9808C9D37D54768": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "LakeDatabasedataPointsToGlueToTable3427B72C",
            "Arn",
          ],
        },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": Object {
          "Ref": "AWS::AccountId",
        },
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "LakeDatabasedataPointsToS3DeliveryStreamBucket621E10D3",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "LakeDatabasedataPointsToGlueToTableServiceRole67CA1129": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LakeDatabasedataPointsToGlueToTableServiceRoleDefaultPolicyADAFD4E2": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "glue:BatchCreatePartition",
                "glue:BatchDeletePartition",
                "glue:CreatePartition",
                "glue:DeletePartition",
                "glue:UpdatePartition",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":glue:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":table/",
                      Object {
                        "Ref": "LakeDatabase6CA13201",
                      },
                      "/",
                      Object {
                        "Ref": "LakeDatabasedataPointsToGlueTableF86F6D7D",
                      },
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":glue:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":database/",
                      Object {
                        "Ref": "LakeDatabase6CA13201",
                      },
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":glue:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":catalog",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "LakeDatabasedataPointsBucketB080069E",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "LakeDatabasedataPointsBucketB080069E",
                          "Arn",
                        ],
                      },
                      "/data_points/",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "LakeDatabasedataPointsBucketB080069E",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "LakeDatabasedataPointsBucketB080069E",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "LakeDatabasedataPointsToS3DeliveryStreamBucket621E10D3",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "LakeDatabasedataPointsToS3DeliveryStreamBucket621E10D3",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LakeDatabasedataPointsToGlueToTableServiceRoleDefaultPolicyADAFD4E2",
        "Roles": Array [
          Object {
            "Ref": "LakeDatabasedataPointsToGlueToTableServiceRole67CA1129",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LakeDatabasedataPointsToS3DeliveryStream14BC848A": Object {
      "Properties": Object {
        "DeliveryStreamType": "KinesisStreamAsSource",
        "ExtendedS3DestinationConfiguration": Object {
          "BucketARN": Object {
            "Fn::GetAtt": Array [
              "LakeDatabasedataPointsToS3DeliveryStreamBucket621E10D3",
              "Arn",
            ],
          },
          "BufferingHints": Object {
            "IntervalInSeconds": 60,
            "SizeInMBs": 64,
          },
          "CompressionFormat": "GZIP",
          "Prefix": "",
          "ProcessingConfiguration": Object {
            "Enabled": true,
            "Processors": Array [
              Object {
                "Parameters": Array [
                  Object {
                    "ParameterName": "LambdaArn",
                    "ParameterValue": Object {
                      "Fn::GetAtt": Array [
                        "LakeDatabasedataPointsToS3ValidatorProcessor676DF886",
                        "Arn",
                      ],
                    },
                  },
                  Object {
                    "ParameterName": "NumberOfRetries",
                    "ParameterValue": "3",
                  },
                ],
                "Type": "Lambda",
              },
            ],
          },
          "RoleARN": Object {
            "Fn::GetAtt": Array [
              "LakeDatabasedataPointsToS3DeliveryStreamKinesisRole95E2FA2F",
              "Arn",
            ],
          },
        },
        "KinesisStreamSourceConfiguration": Object {
          "KinesisStreamARN": Object {
            "Fn::GetAtt": Array [
              "LakeDatabasedataPointsStreamF9D85971",
              "Arn",
            ],
          },
          "RoleARN": Object {
            "Fn::GetAtt": Array [
              "LakeDatabasedataPointsToS3DeliveryStreamKinesisRole95E2FA2F",
              "Arn",
            ],
          },
        },
      },
      "Type": "AWS::KinesisFirehose::DeliveryStream",
    },
    "LakeDatabasedataPointsToS3DeliveryStreamBucket621E10D3": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "LakeDatabasedataPointsToS3DeliveryStreamBucketNotifications879BF603": Object {
      "Properties": Object {
        "BucketName": Object {
          "Ref": "LakeDatabasedataPointsToS3DeliveryStreamBucket621E10D3",
        },
        "NotificationConfiguration": Object {
          "LambdaFunctionConfigurations": Array [
            Object {
              "Events": Array [
                "s3:ObjectCreated:*",
              ],
              "LambdaFunctionArn": Object {
                "Fn::GetAtt": Array [
                  "LakeDatabasedataPointsToGlueToTable3427B72C",
                  "Arn",
                ],
              },
            },
          ],
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3BucketNotifications",
    },
    "LakeDatabasedataPointsToS3DeliveryStreamKinesisRole95E2FA2F": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "firehose.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "LakeDatabasedataPointsToS3DeliveryStreamKinesisRoleDefaultPolicy3788B980": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "kinesis:DescribeStreamSummary",
                "kinesis:GetRecords",
                "kinesis:GetShardIterator",
                "kinesis:ListShards",
                "kinesis:SubscribeToShard",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "LakeDatabasedataPointsStreamF9D85971",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "kms:Decrypt",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "LakeDatabasedataPointsStreamKey6D78F220",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "kinesis:DescribeStream",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "LakeDatabasedataPointsStreamF9D85971",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "LakeDatabasedataPointsToS3DeliveryStreamBucket621E10D3",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "LakeDatabasedataPointsToS3DeliveryStreamBucket621E10D3",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "LakeDatabasedataPointsToS3ValidatorProcessor676DF886",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LakeDatabasedataPointsToS3DeliveryStreamKinesisRoleDefaultPolicy3788B980",
        "Roles": Array [
          Object {
            "Ref": "LakeDatabasedataPointsToS3DeliveryStreamKinesisRole95E2FA2F",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LakeDatabasedataPointsToS3ValidatorProcessor676DF886": Object {
      "Properties": Object {
        "Code": Object {
          "ZipFile": "exports.handler = function(){ throw new Error(\\"Mocked code is running, oops!\\");}",
        },
        "Environment": Object {
          "Variables": Object {
            "entrypoint_id": "1",
            "is_runtime": "true",
          },
        },
        "Handler": "index.handler",
        "MemorySize": 256,
        "Role": Object {
          "Fn::GetAtt": Array [
            "LakeDatabasedataPointsToS3ValidatorProcessorServiceRoleD02004B2",
            "Arn",
          ],
        },
        "Runtime": "nodejs10.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "LakeDatabasedataPointsToS3ValidatorProcessorServiceRoleD02004B2": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
}
`;

exports[`dynamodb stack dynamodb should match snapshot 1`] = `
Object {
  "Resources": Object {
    "CallerAllowEventRuleinvokefunctionCallerSchedule0611FE68E8022069": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "CallerBA8D1D35",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "CallerSchedule962F6585",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "CallerBA8D1D35": Object {
      "Properties": Object {
        "Code": Object {
          "ZipFile": "exports.handler = function(){ throw new Error(\\"Mocked code is running, oops!\\");}",
        },
        "Environment": Object {
          "Variables": Object {
            "entrypoint_id": "1",
            "is_runtime": "true",
            "punchcard_tableName": Object {
              "Ref": "sortedtable7B46B3EA",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "CallerServiceRole8749D4FA",
            "Arn",
          ],
        },
        "Runtime": "nodejs10.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "CallerSchedule962F6585": Object {
      "Properties": Object {
        "ScheduleExpression": "rate(1 minute)",
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "CallerBA8D1D35",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CallerServiceRole8749D4FA": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CallerServiceRoleDefaultPolicy4906D4B8": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "hashtable30434784",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "sortedtable7B46B3EA",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CallerServiceRoleDefaultPolicy4906D4B8",
        "Roles": Array [
          Object {
            "Ref": "CallerServiceRole8749D4FA",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "hashtable30434784": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "id",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": Array [
          Object {
            "AttributeName": "id",
            "KeyType": "HASH",
          },
        ],
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "sortedtable7B46B3EA": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "id",
            "AttributeType": "S",
          },
          Object {
            "AttributeName": "count",
            "AttributeType": "N",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": Array [
          Object {
            "AttributeName": "id",
            "KeyType": "HASH",
          },
          Object {
            "AttributeName": "count",
            "KeyType": "RANGE",
          },
        ],
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
  },
}
`;

exports[`game-score-service stack game-score-service should match snapshot 1`] = `
Object {
  "Resources": Object {
    "GetTopNC659863B": Object {
      "Properties": Object {
        "Code": Object {
          "ZipFile": "exports.handler = function(){ throw new Error(\\"Mocked code is running, oops!\\");}",
        },
        "Environment": Object {
          "Variables": Object {
            "entrypoint_id": "2",
            "is_runtime": "true",
            "punchcard_indexName": "high-scores",
            "punchcard_tableName": Object {
              "Ref": "ScoreStore37F34C0E",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "GetTopNServiceRole4A9A8699",
            "Arn",
          ],
        },
        "Runtime": "nodejs10.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "GetTopNServiceRole4A9A8699": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "GetTopNServiceRoleDefaultPolicyC559803E": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "ScoreStore37F34C0E",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "ScoreStore37F34C0E",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GetTopNServiceRoleDefaultPolicyC559803E",
        "Roles": Array [
          Object {
            "Ref": "GetTopNServiceRole4A9A8699",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ScoreStore37F34C0E": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "userId",
            "AttributeType": "S",
          },
          Object {
            "AttributeName": "gameTitle",
            "AttributeType": "S",
          },
          Object {
            "AttributeName": "topScore",
            "AttributeType": "N",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "GlobalSecondaryIndexes": Array [
          Object {
            "IndexName": "high-scores",
            "KeySchema": Array [
              Object {
                "AttributeName": "gameTitle",
                "KeyType": "HASH",
              },
              Object {
                "AttributeName": "topScore",
                "KeyType": "RANGE",
              },
            ],
            "Projection": Object {
              "ProjectionType": "ALL",
            },
          },
        ],
        "KeySchema": Array [
          Object {
            "AttributeName": "userId",
            "KeyType": "HASH",
          },
          Object {
            "AttributeName": "gameTitle",
            "KeyType": "RANGE",
          },
        ],
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "SubmitScore55BB32E4": Object {
      "Properties": Object {
        "Code": Object {
          "ZipFile": "exports.handler = function(){ throw new Error(\\"Mocked code is running, oops!\\");}",
        },
        "Environment": Object {
          "Variables": Object {
            "entrypoint_id": "1",
            "is_runtime": "true",
            "punchcard_tableName": Object {
              "Ref": "ScoreStore37F34C0E",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SubmitScoreServiceRole9FD5C776",
            "Arn",
          ],
        },
        "Runtime": "nodejs10.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "SubmitScoreServiceRole9FD5C776": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SubmitScoreServiceRoleDefaultPolicy70E0CBA9": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "ScoreStore37F34C0E",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "ScoreStore37F34C0E",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SubmitScoreServiceRoleDefaultPolicy70E0CBA9",
        "Roles": Array [
          Object {
            "Ref": "SubmitScoreServiceRole9FD5C776",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
}
`;

exports[`graphql stack graphql should match snapshot 1`] = `
Object {
  "Resources": Object {
    "GetRelatedPosts45E2F422": Object {
      "Properties": Object {
        "Code": Object {
          "ZipFile": "exports.handler = function(){ throw new Error(\\"Mocked code is running, oops!\\");}",
        },
        "Environment": Object {
          "Variables": Object {
            "entrypoint_id": "1",
            "is_runtime": "true",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "GetRelatedPostsServiceRoleAB59E692",
            "Arn",
          ],
        },
        "Runtime": "nodejs10.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "GetRelatedPostsServiceRoleAB59E692": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "MyApi3597551C": Object {
      "Properties": Object {
        "AuthenticationType": "AWS_IAM",
        "LogConfig": Object {
          "CloudWatchLogsRoleArn": Object {
            "Fn::GetAtt": Array [
              "MyApiCloudWatchRole2BEC1A9C",
              "Arn",
            ],
          },
          "FieldLogLevel": "ALL",
        },
        "Name": "MyApi",
      },
      "Type": "AWS::AppSync::GraphQLApi",
    },
    "MyApiApiCache6C5B11D6": Object {
      "Properties": Object {
        "ApiCachingBehavior": "PER_RESOLVER_CACHING",
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "MyApi3597551C",
            "ApiId",
          ],
        },
        "Ttl": 60,
        "Type": "T2_SMALL",
      },
      "Type": "AWS::AppSync::ApiCache",
    },
    "MyApiCloudWatchRole2BEC1A9C": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "appsync.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "MyApiCloudWatchRoleDefaultPolicy04DC78F2": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:logs:*:*:*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "MyApiCloudWatchRoleDefaultPolicy04DC78F2",
        "Roles": Array [
          Object {
            "Ref": "MyApiCloudWatchRole2BEC1A9C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "MyApiDataSourceMutationaddPost1E64AD9C6": Object {
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "MyApi3597551C",
            "ApiId",
          ],
        },
        "DynamoDBConfig": Object {
          "AwsRegion": Object {
            "Ref": "AWS::Region",
          },
          "TableName": Object {
            "Ref": "PostStoreE7B00A44",
          },
        },
        "Name": "Mutation_addPost1",
        "ServiceRoleArn": Object {
          "Fn::GetAtt": Array [
            "MyApiDataSourcesMutationaddPost1Role5454CE8B",
            "Arn",
          ],
        },
        "Type": "AMAZON_DYNAMODB",
      },
      "Type": "AWS::AppSync::DataSource",
    },
    "MyApiDataSourcePostrelatedPosts180328305": Object {
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "MyApi3597551C",
            "ApiId",
          ],
        },
        "LambdaConfig": Object {
          "LambdaFunctionArn": Object {
            "Fn::GetAtt": Array [
              "GetRelatedPosts45E2F422",
              "Arn",
            ],
          },
        },
        "Name": "Post_relatedPosts1",
        "ServiceRoleArn": Object {
          "Fn::GetAtt": Array [
            "MyApiDataSourcesPostrelatedPosts1RoleC208A0EC",
            "Arn",
          ],
        },
        "Type": "AWS_LAMBDA",
      },
      "Type": "AWS::AppSync::DataSource",
    },
    "MyApiDataSourceQuerygetPost10B9473D8": Object {
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "MyApi3597551C",
            "ApiId",
          ],
        },
        "DynamoDBConfig": Object {
          "AwsRegion": Object {
            "Ref": "AWS::Region",
          },
          "TableName": Object {
            "Ref": "PostStoreE7B00A44",
          },
        },
        "Name": "Query_getPost1",
        "ServiceRoleArn": Object {
          "Fn::GetAtt": Array [
            "MyApiDataSourcesQuerygetPost1Role15C4E688",
            "Arn",
          ],
        },
        "Type": "AMAZON_DYNAMODB",
      },
      "Type": "AWS::AppSync::DataSource",
    },
    "MyApiDataSourcesMutationaddPost1Role5454CE8B": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "appsync.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "MyApiDataSourcesMutationaddPost1RoleDefaultPolicyDD84E53D": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "PostStoreE7B00A44",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "MyApiDataSourcesMutationaddPost1RoleDefaultPolicyDD84E53D",
        "Roles": Array [
          Object {
            "Ref": "MyApiDataSourcesMutationaddPost1Role5454CE8B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "MyApiDataSourcesPostrelatedPosts1RoleC208A0EC": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "appsync.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "MyApiDataSourcesPostrelatedPosts1RoleDefaultPolicy08B55495": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "GetRelatedPosts45E2F422",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "MyApiDataSourcesPostrelatedPosts1RoleDefaultPolicy08B55495",
        "Roles": Array [
          Object {
            "Ref": "MyApiDataSourcesPostrelatedPosts1RoleC208A0EC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "MyApiDataSourcesQuerygetPost1Role15C4E688": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "appsync.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "MyApiDataSourcesQuerygetPost1RoleDefaultPolicy1FCBC18A": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "PostStoreE7B00A44",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "MyApiDataSourcesQuerygetPost1RoleDefaultPolicy1FCBC18A",
        "Roles": Array [
          Object {
            "Ref": "MyApiDataSourcesQuerygetPost1Role15C4E688",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "MyApiNone7A81D43E": Object {
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "MyApi3597551C",
            "ApiId",
          ],
        },
        "Description": "Empty Data Source",
        "Name": "NONE",
        "Type": "NONE",
      },
      "Type": "AWS::AppSync::DataSource",
    },
    "MyApiResolveMutationaddPostF92111DC": Object {
      "DependsOn": Array [
        "MyApiSchema552ABCAD",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "MyApi3597551C",
            "ApiId",
          ],
        },
        "DataSourceName": Object {
          "Fn::GetAtt": Array [
            "MyApiDataSourceMutationaddPost1E64AD9C6",
            "Name",
          ],
        },
        "FieldName": "addPost",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#set($context.stash.var1 = $util.autoId())
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"PutItem\\",
  \\"key\\": {
    \\"id\\": $util.dynamodb.toDynamoDBJson($context.stash.var1)
  },
  \\"attributeValues\\": {
    \\"title\\": $util.dynamodb.toDynamoDBJson($context.arguments.title),
    \\"content\\": $util.dynamodb.toDynamoDBJson($context.arguments.content),
    \\"tags\\": $util.dynamodb.toDynamoDBJson($context.arguments.tags)
  }
}",
        "ResponseMappingTemplate": "#set($context.stash.var2 = $context.result)

$util.toJson($context.stash.var2)",
        "TypeName": "Mutation",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "MyApiResolvePostrelatedPostsBD59287C": Object {
      "DependsOn": Array [
        "MyApiSchema552ABCAD",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "MyApi3597551C",
            "ApiId",
          ],
        },
        "DataSourceName": Object {
          "Fn::GetAtt": Array [
            "MyApiDataSourcePostrelatedPosts180328305",
            "Name",
          ],
        },
        "FieldName": "relatedPosts",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\": $util.toJson($context.arguments.tags)
}",
        "ResponseMappingTemplate": "#set($context.stash.var1 = $context.result)

$util.toJson($context.stash.var1)",
        "TypeName": "Post",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "MyApiResolveQuerygetPostF0D4061E": Object {
      "DependsOn": Array [
        "MyApiSchema552ABCAD",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "MyApi3597551C",
            "ApiId",
          ],
        },
        "CachingConfig": Object {
          "CachingKeys": Array [
            "$context.arguments.id",
          ],
          "Ttl": 60,
        },
        "DataSourceName": Object {
          "Fn::GetAtt": Array [
            "MyApiDataSourceQuerygetPost10B9473D8",
            "Name",
          ],
        },
        "FieldName": "getPost",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"GetItem\\",
  \\"key\\": {
    \\"id\\": $util.dynamodb.toDynamoDBJson($context.arguments.id)
  }
}",
        "ResponseMappingTemplate": "#set($context.stash.var1 = $context.result)

$util.toJson($context.stash.var1)",
        "TypeName": "Query",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "MyApiResolveSubscriptionnewPost7AA3D95F": Object {
      "DependsOn": Array [
        "MyApiSchema552ABCAD",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "MyApi3597551C",
            "ApiId",
          ],
        },
        "DataSourceName": Object {
          "Fn::GetAtt": Array [
            "MyApiNone7A81D43E",
            "Name",
          ],
        },
        "FieldName": "newPost",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#if($context.identity.username.equalsIgnoreCase(\\"sam\\"))
  $util.error(\\"sam is not allowed\\")
#end
{
  \\"version\\": \\"2017-02-28\\",
  \\"payload\\": {
    
  }
}",
        "ResponseMappingTemplate": "null",
        "TypeName": "Subscription",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "MyApiSchema552ABCAD": Object {
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "MyApi3597551C",
            "ApiId",
          ],
        },
        "Definition": "type Query {
  getPost(id: ID!): Post!
}
type Post {
  id: ID!
  title: String!
  content: String!
  tags: [String!]!
  relatedPosts(tags: [String!]!): [Post!]!
}
type Mutation {
  addPost(title: String!,content: String!,tags: [String!]!): Post!
}
type Subscription {
  newPost: Post
    @aws_subscribe(mutations:[\\"addPost\\"])
}
schema {
  query: Query,
  mutation: Mutation,
  subscription: Subscription
}",
      },
      "Type": "AWS::AppSync::GraphQLSchema",
    },
    "PostStoreE7B00A44": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "id",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": Array [
          Object {
            "AttributeName": "id",
            "KeyType": "HASH",
          },
        ],
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "UserPool6BA7E5F2": Object {
      "Properties": Object {
        "AccountRecoverySetting": Object {
          "RecoveryMechanisms": Array [
            Object {
              "Name": "verified_phone_number",
              "Priority": 1,
            },
            Object {
              "Name": "verified_email",
              "Priority": 2,
            },
          ],
        },
        "AdminCreateUserConfig": Object {
          "AllowAdminCreateUserOnly": true,
        },
        "EmailVerificationMessage": "The verification code to your new account is {####}",
        "EmailVerificationSubject": "Verify your new account",
        "SmsConfiguration": Object {
          "ExternalId": "graphqlUserPool8D7802F2",
          "SnsCallerArn": Object {
            "Fn::GetAtt": Array [
              "UserPoolsmsRole4EA729DD",
              "Arn",
            ],
          },
        },
        "SmsVerificationMessage": "The verification code to your new account is {####}",
        "VerificationMessageTemplate": Object {
          "DefaultEmailOption": "CONFIRM_WITH_CODE",
          "EmailMessage": "The verification code to your new account is {####}",
          "EmailSubject": "Verify your new account",
          "SmsMessage": "The verification code to your new account is {####}",
        },
      },
      "Type": "AWS::Cognito::UserPool",
    },
    "UserPoolsmsRole4EA729DD": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Condition": Object {
                "StringEquals": Object {
                  "sts:ExternalId": "graphqlUserPool8D7802F2",
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "Service": "cognito-idp.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": "sns:Publish",
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "sns-publish",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
}
`;

exports[`hello-world stack hello-world should match snapshot 1`] = `
Object {
  "Resources": Object {
    "ForEachMessage77313248": Object {
      "Properties": Object {
        "Code": Object {
          "ZipFile": "exports.handler = function(){ throw new Error(\\"Mocked code is running, oops!\\");}",
        },
        "Environment": Object {
          "Variables": Object {
            "entrypoint_id": "2",
            "is_runtime": "true",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "ForEachMessageServiceRoleEF81D5ED",
            "Arn",
          ],
        },
        "Runtime": "nodejs10.x",
        "Timeout": 10,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ForEachMessageServiceRoleDefaultPolicy55776E2C": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "sqs:ReceiveMessage",
                "sqs:ChangeMessageVisibility",
                "sqs:GetQueueUrl",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "queue276F7297",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ForEachMessageServiceRoleDefaultPolicy55776E2C",
        "Roles": Array [
          Object {
            "Ref": "ForEachMessageServiceRoleEF81D5ED",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ForEachMessageServiceRoleEF81D5ED": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ForEachMessageSqsEventSourcehelloworldqueueD87B605BDC9D499A": Object {
      "Properties": Object {
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "queue276F7297",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Ref": "ForEachMessage77313248",
        },
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "MyFunction3BAA72D1": Object {
      "Properties": Object {
        "Code": Object {
          "ZipFile": "exports.handler = function(){ throw new Error(\\"Mocked code is running, oops!\\");}",
        },
        "Environment": Object {
          "Variables": Object {
            "entrypoint_id": "1",
            "is_runtime": "true",
            "punchcard_queueUrl": Object {
              "Ref": "queue276F7297",
            },
            "punchcard_tableName": Object {
              "Ref": "TableCD117FA1",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "MyFunctionServiceRole3C357FF2",
            "Arn",
          ],
        },
        "Runtime": "nodejs10.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "MyFunctionAllowEventRulehelloworldMyFunctionScheduleAED6CE6B66BC7FB4": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "MyFunction3BAA72D1",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "MyFunctionScheduleDD3F691B",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "MyFunctionScheduleDD3F691B": Object {
      "Properties": Object {
        "ScheduleExpression": "rate(1 minute)",
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "MyFunction3BAA72D1",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "MyFunctionServiceRole3C357FF2": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "MyFunctionServiceRoleDefaultPolicyB705ABD4": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "TableCD117FA1",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            Object {
              "Action": Array [
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:GetQueueUrl",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "queue276F7297",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "MyFunctionServiceRoleDefaultPolicyB705ABD4",
        "Roles": Array [
          Object {
            "Ref": "MyFunctionServiceRole3C357FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "TableCD117FA1": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "key",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": Array [
          Object {
            "AttributeName": "key",
            "KeyType": "HASH",
          },
        ],
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "queue276F7297": Object {
      "Type": "AWS::SQS::Queue",
    },
  },
}
`;

exports[`invoke-function stack invoke-function should match snapshot 1`] = `
Object {
  "Resources": Object {
    "CallableB8832084": Object {
      "Properties": Object {
        "Code": Object {
          "ZipFile": "exports.handler = function(){ throw new Error(\\"Mocked code is running, oops!\\");}",
        },
        "Environment": Object {
          "Variables": Object {
            "entrypoint_id": "1",
            "is_runtime": "true",
            "punchcard_tableName": Object {
              "Ref": "mytable0324D45C",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "CallableServiceRole227DEF92",
            "Arn",
          ],
        },
        "Runtime": "nodejs10.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "CallableServiceRole227DEF92": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CallableServiceRoleDefaultPolicy77FA54C6": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "mytable0324D45C",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CallableServiceRoleDefaultPolicy77FA54C6",
        "Roles": Array [
          Object {
            "Ref": "CallableServiceRole227DEF92",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CallerAllowEventRuleinvokefunctionexampleCallerSchedule6A5466654735B083": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "CallerBA8D1D35",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "CallerSchedule962F6585",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "CallerBA8D1D35": Object {
      "Properties": Object {
        "Code": Object {
          "ZipFile": "exports.handler = function(){ throw new Error(\\"Mocked code is running, oops!\\");}",
        },
        "Environment": Object {
          "Variables": Object {
            "entrypoint_id": "2",
            "is_runtime": "true",
            "punchcard_functionArn": Object {
              "Fn::GetAtt": Array [
                "CallableB8832084",
                "Arn",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "CallerServiceRole8749D4FA",
            "Arn",
          ],
        },
        "Runtime": "nodejs10.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "CallerSchedule962F6585": Object {
      "Properties": Object {
        "ScheduleExpression": "rate(1 minute)",
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "CallerBA8D1D35",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CallerServiceRole8749D4FA": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CallerServiceRoleDefaultPolicy4906D4B8": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "CallableB8832084",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CallerServiceRoleDefaultPolicy4906D4B8",
        "Roles": Array [
          Object {
            "Ref": "CallerServiceRole8749D4FA",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "mytable0324D45C": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "id",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": Array [
          Object {
            "AttributeName": "id",
            "KeyType": "HASH",
          },
        ],
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
  },
}
`;

exports[`scheduled-function stack scheduled-function should match snapshot 1`] = `
Object {
  "Resources": Object {
    "Poller8D8A3186": Object {
      "Properties": Object {
        "Code": Object {
          "ZipFile": "exports.handler = function(){ throw new Error(\\"Mocked code is running, oops!\\");}",
        },
        "Environment": Object {
          "Variables": Object {
            "entrypoint_id": "1",
            "is_runtime": "true",
            "punchcard_tableName": Object {
              "Ref": "mytable0324D45C",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "PollerServiceRoleE2C79911",
            "Arn",
          ],
        },
        "Runtime": "nodejs10.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "PollerAllowEventRulescheduledfunctionexamplePollerScheduleB75FCD574E4896FE": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "Poller8D8A3186",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "PollerSchedule74EB746C",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "PollerSchedule74EB746C": Object {
      "Properties": Object {
        "ScheduleExpression": "rate(1 minute)",
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "Poller8D8A3186",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "PollerServiceRoleDefaultPolicy6BA3D6F9": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "mytable0324D45C",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "PollerServiceRoleDefaultPolicy6BA3D6F9",
        "Roles": Array [
          Object {
            "Ref": "PollerServiceRoleE2C79911",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "PollerServiceRoleE2C79911": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "mytable0324D45C": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "id",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": Array [
          Object {
            "AttributeName": "id",
            "KeyType": "HASH",
          },
        ],
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
  },
}
`;

exports[`straw-poll stack straw-poll should match snapshot 1`] = `
Object {
  "Resources": Object {
    "PollStore9D5823C2": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "id",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": Array [
          Object {
            "AttributeName": "id",
            "KeyType": "HASH",
          },
        ],
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "StrawPollApiDA23AE9A": Object {
      "Properties": Object {
        "AuthenticationType": "AWS_IAM",
        "LogConfig": Object {
          "CloudWatchLogsRoleArn": Object {
            "Fn::GetAtt": Array [
              "StrawPollCloudWatchRole164EEC36",
              "Arn",
            ],
          },
          "FieldLogLevel": "ALL",
        },
        "Name": "StrawPoll",
      },
      "Type": "AWS::AppSync::GraphQLApi",
    },
    "StrawPollApiDataSourcesMutationaddPoll1RoleCB2AF897": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "appsync.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "StrawPollApiDataSourcesMutationaddPoll1RoleDefaultPolicy78D5C991": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "PollStore9D5823C2",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StrawPollApiDataSourcesMutationaddPoll1RoleDefaultPolicy78D5C991",
        "Roles": Array [
          Object {
            "Ref": "StrawPollApiDataSourcesMutationaddPoll1RoleCB2AF897",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StrawPollApiDataSourcesMutationupVote1Role4F2BA985": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "appsync.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "StrawPollApiDataSourcesMutationupVote1RoleDefaultPolicyD031CF0B": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "PollStore9D5823C2",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StrawPollApiDataSourcesMutationupVote1RoleDefaultPolicyD031CF0B",
        "Roles": Array [
          Object {
            "Ref": "StrawPollApiDataSourcesMutationupVote1Role4F2BA985",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StrawPollApiDataSourcesQuerygetPoll1Role0D62635C": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "appsync.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "StrawPollApiDataSourcesQuerygetPoll1RoleDefaultPolicyCBD395F0": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "PollStore9D5823C2",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StrawPollApiDataSourcesQuerygetPoll1RoleDefaultPolicyCBD395F0",
        "Roles": Array [
          Object {
            "Ref": "StrawPollApiDataSourcesQuerygetPoll1Role0D62635C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StrawPollCloudWatchRole164EEC36": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "appsync.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "StrawPollCloudWatchRoleDefaultPolicy1D4F6822": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:logs:*:*:*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StrawPollCloudWatchRoleDefaultPolicy1D4F6822",
        "Roles": Array [
          Object {
            "Ref": "StrawPollCloudWatchRole164EEC36",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StrawPollDataSourceMutationaddPoll1635F6C6B": Object {
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "StrawPollApiDA23AE9A",
            "ApiId",
          ],
        },
        "DynamoDBConfig": Object {
          "AwsRegion": Object {
            "Ref": "AWS::Region",
          },
          "TableName": Object {
            "Ref": "PollStore9D5823C2",
          },
        },
        "Name": "Mutation_addPoll1",
        "ServiceRoleArn": Object {
          "Fn::GetAtt": Array [
            "StrawPollApiDataSourcesMutationaddPoll1RoleCB2AF897",
            "Arn",
          ],
        },
        "Type": "AMAZON_DYNAMODB",
      },
      "Type": "AWS::AppSync::DataSource",
    },
    "StrawPollDataSourceMutationupVote1039185A7": Object {
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "StrawPollApiDA23AE9A",
            "ApiId",
          ],
        },
        "DynamoDBConfig": Object {
          "AwsRegion": Object {
            "Ref": "AWS::Region",
          },
          "TableName": Object {
            "Ref": "PollStore9D5823C2",
          },
        },
        "Name": "Mutation_upVote1",
        "ServiceRoleArn": Object {
          "Fn::GetAtt": Array [
            "StrawPollApiDataSourcesMutationupVote1Role4F2BA985",
            "Arn",
          ],
        },
        "Type": "AMAZON_DYNAMODB",
      },
      "Type": "AWS::AppSync::DataSource",
    },
    "StrawPollDataSourceQuerygetPoll1E5317BCA": Object {
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "StrawPollApiDA23AE9A",
            "ApiId",
          ],
        },
        "DynamoDBConfig": Object {
          "AwsRegion": Object {
            "Ref": "AWS::Region",
          },
          "TableName": Object {
            "Ref": "PollStore9D5823C2",
          },
        },
        "Name": "Query_getPoll1",
        "ServiceRoleArn": Object {
          "Fn::GetAtt": Array [
            "StrawPollApiDataSourcesQuerygetPoll1Role0D62635C",
            "Arn",
          ],
        },
        "Type": "AMAZON_DYNAMODB",
      },
      "Type": "AWS::AppSync::DataSource",
    },
    "StrawPollResolveMutationaddPollEEE02ABB": Object {
      "DependsOn": Array [
        "StrawPollSchema71E8F18D",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "StrawPollApiDA23AE9A",
            "ApiId",
          ],
        },
        "DataSourceName": Object {
          "Fn::GetAtt": Array [
            "StrawPollDataSourceMutationaddPoll1635F6C6B",
            "Name",
          ],
        },
        "FieldName": "addPoll",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#set($context.stash.var1 = $util.autoId())
#set($context.stash.var2 = $util.time.nowISO8601())
#set($context.stash.var3 = {})
#foreach( $item1 in $context.arguments.input.candidates)
  #set($context.stash.var4 = {})
  $util.qr($context.stash.var4.put(\\"__typename\\", \\"Candidate\\"))
  $util.qr($context.stash.var4.put(\\"candidateId\\", \\"$foreach.index\\"))
  $util.qr($context.stash.var4.put(\\"answer\\", $item1.answer))
  #set($context.stash.var5 = 0)
  $util.qr($context.stash.var4.put(\\"upvotes\\", $context.stash.var5))
  #set($context.stash.var6 = $util.qr($context.stash.var3.put(\\"$foreach.index\\", $context.stash.var4)))
  
#end
#if($context.stash.var1.isEmpty())
  $util.error(\\"baddy\\")
#end
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"PutItem\\",
  \\"key\\": {
    \\"id\\": $util.dynamodb.toDynamoDBJson($context.stash.var1)
  },
  \\"attributeValues\\": {
    \\"name\\": $util.dynamodb.toDynamoDBJson($context.arguments.input.name),
    \\"createdAt\\": $util.dynamodb.toDynamoDBJson($context.stash.var2),
    \\"candidates\\": $util.dynamodb.toDynamoDBJson($context.stash.var3)
  }
}",
        "ResponseMappingTemplate": "#set($context.stash.var7 = $context.result)

#set($context.stash.var8 = {})
$util.qr($context.stash.var8.put(\\"__typename\\", \\"Poll\\"))
$util.qr($context.stash.var8.put(\\"id\\", $context.stash.var7.id))
$util.qr($context.stash.var8.put(\\"name\\", $context.stash.var7.name))
$util.qr($context.stash.var8.put(\\"createdAt\\", $context.stash.var7.createdAt))
$util.qr($context.stash.var8.put(\\"candidates\\", $context.stash.var7.candidates.values()))
$util.toJson($context.stash.var8)",
        "TypeName": "Mutation",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "StrawPollResolveMutationupVote63A6C9B5": Object {
      "DependsOn": Array [
        "StrawPollSchema71E8F18D",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "StrawPollApiDA23AE9A",
            "ApiId",
          ],
        },
        "DataSourceName": Object {
          "Fn::GetAtt": Array [
            "StrawPollDataSourceMutationupVote1039185A7",
            "Name",
          ],
        },
        "FieldName": "upVote",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#set($CONDITION = [])
#set($ADD = [])
#set($DELETE = [])
#set($SET = [])
#set($VALUES = {})
#set($NAMES = {})
$util.qr($NAMES.put(\\"#1\\", \\"candidates\\"))
$util.qr($NAMES.put(\\"#2\\", $context.arguments.candidateId))
$util.qr($CONDITION.add(\\"attribute_exists(#1.#2)\\"))
#if($context.arguments.direction == \\"UP\\")
  $util.qr($NAMES.put(\\"#3\\", \\"candidates\\"))
  $util.qr($NAMES.put(\\"#4\\", $context.arguments.candidateId))
  $util.qr($NAMES.put(\\"#5\\", \\"upvotes\\"))
  #set($var1 = $util.dynamodb.toNumber(1))
  $util.qr($VALUES.put(\\":1\\", $var1))
  $util.qr($ADD.add(\\"#3.#4.#5 :1\\"))
  
#{else}
  $util.qr($NAMES.put(\\"#6\\", \\"candidates\\"))
  $util.qr($NAMES.put(\\"#7\\", $context.arguments.candidateId))
  $util.qr($NAMES.put(\\"#8\\", \\"upvotes\\"))
  #set($var2 = $util.dynamodb.toNumber(-1))
  $util.qr($VALUES.put(\\":2\\", $var2))
  $util.qr($ADD.add(\\"#6.#7.#8 :2\\"))
  
#end
#set($EXPRESSION = \\"\\")

## DynamoDB Update Expressions - SET
#if(!$SET.isEmpty())
  #set($EXPRESSION = \\"$EXPRESSION SET #foreach($item in $SET)$item#if($foreach.hasNext), #end#end\\")
  
#end

## DynamoDB Update Expressions - ADD
#if(!$ADD.isEmpty())
  #set($EXPRESSION = \\"$EXPRESSION ADD #foreach($item in $ADD)$item#if($foreach.hasNext), #end#end\\")
  
#end

## DynamoDB Update Expressions - DELETE
#if(!$DELETE.isEmpty())
  #set($EXPRESSION = \\"$EXPRESSION DELETE #foreach($item in $DELETE)$item#if($foreach.hasNext), #end#end\\")
  
#end
#if(!$CONDITION.isEmpty())
  #set($conditionExpression = \\"#foreach($item in $CONDITION)($item)#if($foreach.hasNext) and #end#end\\")
  #set($context.stash.var3 = {})
  $util.qr($context.stash.var3.put(\\"expression\\", $conditionExpression))
  $util.qr($context.stash.var3.put(\\"expressionNames\\", $NAMES))
  $util.qr($context.stash.var3.put(\\"expressionValues\\", $VALUES))
  #set($local5 = $context.stash.var3)
  
#end
#set($context.stash.var4 = $local5)
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": {
    \\"id\\": $util.dynamodb.toDynamoDBJson($context.arguments.pollId)
  },
  \\"update\\": {
    \\"expression\\": $util.toJson($EXPRESSION),
    \\"expressionNames\\": $util.toJson($NAMES),
    \\"expressionValues\\": $util.toJson($VALUES)
  },
  \\"condition\\": $util.toJson($context.stash.var4)
}",
        "ResponseMappingTemplate": "#set($context.stash.var5 = $context.result)

#set($context.stash.var6 = {})
$util.qr($context.stash.var6.put(\\"__typename\\", \\"VoteType\\"))
$util.qr($context.stash.var6.put(\\"pollId\\", $context.arguments.pollId))
$util.qr($context.stash.var6.put(\\"candidateId\\", $context.arguments.candidateId))
$util.qr($context.stash.var6.put(\\"clientId\\", $context.arguments.clientId))
$util.qr($context.stash.var6.put(\\"upvotes\\", $context.stash.var5.candidates.get($context.arguments.candidateId).upvotes))
$util.qr($context.stash.var6.put(\\"direction\\", $context.arguments.direction))
$util.toJson($context.stash.var6)",
        "TypeName": "Mutation",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "StrawPollResolveQuerygetPoll41F2001C": Object {
      "DependsOn": Array [
        "StrawPollSchema71E8F18D",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "StrawPollApiDA23AE9A",
            "ApiId",
          ],
        },
        "DataSourceName": Object {
          "Fn::GetAtt": Array [
            "StrawPollDataSourceQuerygetPoll1E5317BCA",
            "Name",
          ],
        },
        "FieldName": "getPoll",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"GetItem\\",
  \\"key\\": {
    \\"id\\": $util.dynamodb.toDynamoDBJson($context.arguments.id)
  }
}",
        "ResponseMappingTemplate": "#set($context.stash.var1 = $context.result)

#set($context.stash.var2 = {})
$util.qr($context.stash.var2.put(\\"__typename\\", \\"Poll\\"))
$util.qr($context.stash.var2.put(\\"id\\", $context.stash.var1.id))
$util.qr($context.stash.var2.put(\\"name\\", $context.stash.var1.name))
$util.qr($context.stash.var2.put(\\"createdAt\\", $context.stash.var1.createdAt))
$util.qr($context.stash.var2.put(\\"candidates\\", $context.stash.var1.candidates.values()))
$util.toJson($context.stash.var2)",
        "TypeName": "Query",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "StrawPollSchema71E8F18D": Object {
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "StrawPollApiDA23AE9A",
            "ApiId",
          ],
        },
        "Definition": "type Query {
  getPoll(id: ID!): Poll
}
type Poll {
  id: ID!
  name: String!
  createdAt: AWSDateTime!
  candidates: [Candidate!]!
}
type Candidate {
  candidateId: ID!
  answer: String
  upvotes: Int!
}
type Mutation {
  upVote(pollId: ID!,candidateId: ID!,clientId: ID!,direction: VoteDirection!): VoteType!
  addPoll(input: CreatePollInput!): Poll!
}
type VoteType {
  pollId: ID!
  candidateId: ID!
  clientId: ID!
  upvotes: Int!
  direction: VoteDirection!
}
enum VoteDirection {
  UP
  DOWN
}
input CandidateInput {
  answer: String!
}
input CreatePollInput {
  name: String!
  candidates: [CandidateInput!]!
}
type Subscription {
  onUpdateById(pollId: ID!): VoteType
    @aws_subscribe(mutations:[\\"upVote\\"])
}
schema {
  query: Query,
  mutation: Mutation,
  subscription: Subscription
}",
      },
      "Type": "AWS::AppSync::GraphQLSchema",
    },
  },
}
`;

exports[`stream-processing stack stream-processing should match snapshot 1`] = `
Object {
  "Resources": Object {
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": Object {
      "Properties": Object {
        "Code": Object {
          "ZipFile": "exports.handler = (event, context) => {
    // eslint-disable-next-line @typescript-eslint/no-require-imports, import/no-extraneous-dependencies
    const s3 = new (require('aws-sdk').S3)();
    // eslint-disable-next-line @typescript-eslint/no-require-imports
    const https = require('https');
    // eslint-disable-next-line @typescript-eslint/no-require-imports
    const url = require('url');
    log(JSON.stringify(event, undefined, 2));
    const props = event.ResourceProperties;
    if (event.RequestType === 'Delete') {
        props.NotificationConfiguration = {}; // this is how you clean out notifications
    }
    const req = {
        Bucket: props.BucketName,
        NotificationConfiguration: props.NotificationConfiguration,
    };
    return s3.putBucketNotificationConfiguration(req, (err, data) => {
        log({ err, data });
        if (err) {
            return submitResponse('FAILED', err.message + \`\\\\nMore information in CloudWatch Log Stream: \${context.logStreamName}\`);
        }
        else {
            return submitResponse('SUCCESS');
        }
    });
    function log(obj) {
        console.error(event.RequestId, event.StackId, event.LogicalResourceId, obj);
    }
    // tslint:disable-next-line:max-line-length
    // adapted from https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html#cfn-lambda-function-code-cfnresponsemodule
    // to allow sending an error messge as a reason.
    function submitResponse(responseStatus, reason) {
        const responseBody = JSON.stringify({
            Status: responseStatus,
            Reason: reason || 'See the details in CloudWatch Log Stream: ' + context.logStreamName,
            PhysicalResourceId: event.PhysicalResourceId || event.LogicalResourceId,
            StackId: event.StackId,
            RequestId: event.RequestId,
            LogicalResourceId: event.LogicalResourceId,
            NoEcho: false,
        });
        log({ responseBody });
        const parsedUrl = url.parse(event.ResponseURL);
        const options = {
            hostname: parsedUrl.hostname,
            port: 443,
            path: parsedUrl.path,
            method: 'PUT',
            headers: {
                'content-type': '',
                'content-length': responseBody.length,
            },
        };
        const request = https.request(options, (r) => {
            log({ statusCode: r.statusCode, statusMessage: r.statusMessage });
            context.done();
        });
        request.on('error', (error) => {
            log({ sendError: error });
            context.done();
        });
        request.write(responseBody);
        request.end();
    }
};",
        },
        "Description": "AWS CloudFormation handler for \\"Custom::S3BucketNotifications\\" resources (@aws-cdk/aws-s3)",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn",
          ],
        },
        "Runtime": "nodejs10.x",
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": Array [
          Object {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DatabaseB269D8BB": Object {
      "Properties": Object {
        "CatalogId": Object {
          "Ref": "AWS::AccountId",
        },
        "DatabaseInput": Object {
          "Name": "my_database",
        },
      },
      "Type": "AWS::Glue::Database",
    },
    "DummyData3BBFD842": Object {
      "Properties": Object {
        "Code": Object {
          "ZipFile": "exports.handler = function(){ throw new Error(\\"Mocked code is running, oops!\\");}",
        },
        "Environment": Object {
          "Variables": Object {
            "entrypoint_id": "1",
            "is_runtime": "true",
            "punchcard_tableName": Object {
              "Ref": "Enrichments5620103C",
            },
            "punchcard_topicArn": Object {
              "Ref": "TopicBFC7AF6E",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "DummyDataServiceRoleF6E3733B",
            "Arn",
          ],
        },
        "Runtime": "nodejs10.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "DummyDataAllowEventRulestreamprocessingDummyDataScheduleC3AD2CFF74B25A46": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DummyData3BBFD842",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "DummyDataSchedule02704414",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DummyDataSchedule02704414": Object {
      "Properties": Object {
        "ScheduleExpression": "rate(1 minute)",
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "DummyData3BBFD842",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "DummyDataServiceRoleDefaultPolicy777E876E": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "TopicBFC7AF6E",
              },
            },
            Object {
              "Action": Array [
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "Enrichments5620103C",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DummyDataServiceRoleDefaultPolicy777E876E",
        "Roles": Array [
          Object {
            "Ref": "DummyDataServiceRoleF6E3733B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DummyDataServiceRoleF6E3733B": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "Enrichments5620103C": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "key",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": Array [
          Object {
            "AttributeName": "key",
            "KeyType": "HASH",
          },
        ],
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "ForEachNotificationAllowInvokestreamprocessingTopic70C75BD04DF3EC85": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "ForEachNotificationB4EB4E5A",
            "Arn",
          ],
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": Object {
          "Ref": "TopicBFC7AF6E",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ForEachNotificationB4EB4E5A": Object {
      "Properties": Object {
        "Code": Object {
          "ZipFile": "exports.handler = function(){ throw new Error(\\"Mocked code is running, oops!\\");}",
        },
        "Environment": Object {
          "Variables": Object {
            "entrypoint_id": "2",
            "is_runtime": "true",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "ForEachNotificationServiceRole460EBC3F",
            "Arn",
          ],
        },
        "Runtime": "nodejs10.x",
        "Timeout": 10,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ForEachNotificationServiceRole460EBC3F": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ForEachNotificationTopicD414C2CB": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "ForEachNotificationB4EB4E5A",
            "Arn",
          ],
        },
        "Protocol": "lambda",
        "TopicArn": Object {
          "Ref": "TopicBFC7AF6E",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "Queue4A7E3555": Object {
      "Type": "AWS::SQS::Queue",
    },
    "QueuePolicy25439813": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sqs:SendMessage",
              "Condition": Object {
                "ArnEquals": Object {
                  "aws:SourceArn": Object {
                    "Ref": "TopicBFC7AF6E",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "Service": "sns.amazonaws.com",
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "Queue4A7E3555",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": Array [
          Object {
            "Ref": "Queue4A7E3555",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
    "QueuestreamprocessingTopic70C75BD04E5F9C3B": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "Queue4A7E3555",
            "Arn",
          ],
        },
        "Protocol": "sqs",
        "RawMessageDelivery": true,
        "TopicArn": Object {
          "Ref": "TopicBFC7AF6E",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "Stream790BDEE4": Object {
      "Properties": Object {
        "RetentionPeriodHours": 24,
        "ShardCount": 1,
        "StreamEncryption": Object {
          "EncryptionType": "KMS",
          "KeyId": Object {
            "Fn::GetAtt": Array [
              "StreamKey238BEC37",
              "Arn",
            ],
          },
        },
      },
      "Type": "AWS::Kinesis::Stream",
    },
    "StreamKey238BEC37": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "Description": "Created by stream-processing/Stream",
        "KeyPolicy": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion",
                "kms:GenerateDataKey",
                "kms:TagResource",
                "kms:UntagResource",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::GetAtt": Array [
                    "StreamToStreamServiceRole00FC6AF4",
                    "Arn",
                  ],
                },
              },
              "Resource": "*",
            },
            Object {
              "Action": "kms:Decrypt",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::GetAtt": Array [
                    "ToS3DeliveryStreamKinesisRole01962BE0",
                    "Arn",
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": "Retain",
    },
    "StreamToStream239763A4": Object {
      "Properties": Object {
        "Code": Object {
          "ZipFile": "exports.handler = function(){ throw new Error(\\"Mocked code is running, oops!\\");}",
        },
        "Environment": Object {
          "Variables": Object {
            "entrypoint_id": "3",
            "is_runtime": "true",
            "punchcard_streamName": Object {
              "Ref": "Stream790BDEE4",
            },
            "punchcard_tableName": Object {
              "Ref": "Enrichments5620103C",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "StreamToStreamServiceRole00FC6AF4",
            "Arn",
          ],
        },
        "Runtime": "nodejs10.x",
        "Timeout": 10,
      },
      "Type": "AWS::Lambda::Function",
    },
    "StreamToStreamServiceRole00FC6AF4": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "StreamToStreamServiceRoleDefaultPolicy93072749": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "kinesis:ListShards",
                "kinesis:PutRecord",
                "kinesis:PutRecords",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "Stream790BDEE4",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "StreamKey238BEC37",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "Enrichments5620103C",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            Object {
              "Action": Array [
                "sqs:ReceiveMessage",
                "sqs:ChangeMessageVisibility",
                "sqs:GetQueueUrl",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "Queue4A7E3555",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StreamToStreamServiceRoleDefaultPolicy93072749",
        "Roles": Array [
          Object {
            "Ref": "StreamToStreamServiceRole00FC6AF4",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StreamToStreamSqsEventSourcestreamprocessingQueue3C31E92B21F620E7": Object {
      "Properties": Object {
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "Queue4A7E3555",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Ref": "StreamToStream239763A4",
        },
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "ToGlueBucket21D24ECF": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "ToGlueTableCEC90A28": Object {
      "Properties": Object {
        "CatalogId": Object {
          "Ref": "AWS::AccountId",
        },
        "DatabaseName": Object {
          "Ref": "DatabaseB269D8BB",
        },
        "TableInput": Object {
          "Description": "my_table generated by CDK",
          "Name": "my_table",
          "Parameters": Object {
            "has_encrypted_data": false,
          },
          "PartitionKeys": Array [
            Object {
              "Name": "year",
              "Type": "int",
            },
            Object {
              "Name": "month",
              "Type": "int",
            },
            Object {
              "Name": "day",
              "Type": "int",
            },
            Object {
              "Name": "hour",
              "Type": "int",
            },
            Object {
              "Name": "minute",
              "Type": "int",
            },
          ],
          "StorageDescriptor": Object {
            "Columns": Array [
              Object {
                "Name": "key",
                "Type": "string",
              },
              Object {
                "Name": "count",
                "Type": "int",
              },
              Object {
                "Name": "tags",
                "Type": "array<string>",
              },
              Object {
                "Name": "timestamp",
                "Type": "timestamp",
              },
            ],
            "Compressed": false,
            "InputFormat": "org.apache.hadoop.mapred.TextInputFormat",
            "Location": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "s3://",
                  Object {
                    "Ref": "ToGlueBucket21D24ECF",
                  },
                  "/my_table/",
                ],
              ],
            },
            "OutputFormat": "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
            "SerdeInfo": Object {
              "SerializationLibrary": "org.openx.data.jsonserde.JsonSerDe",
            },
            "StoredAsSubDirectories": false,
          },
          "TableType": "EXTERNAL_TABLE",
        },
      },
      "Type": "AWS::Glue::Table",
    },
    "ToGlueToTableAllowBucketNotificationsFromstreamprocessingToS3DeliveryStreamBucketEA39D833D9B00FDB": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "ToGlueToTableCC856D42",
            "Arn",
          ],
        },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": Object {
          "Ref": "AWS::AccountId",
        },
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "ToS3DeliveryStreamBucket410C5594",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ToGlueToTableCC856D42": Object {
      "Properties": Object {
        "Code": Object {
          "ZipFile": "exports.handler = function(){ throw new Error(\\"Mocked code is running, oops!\\");}",
        },
        "Environment": Object {
          "Variables": Object {
            "entrypoint_id": "5",
            "is_runtime": "true",
            "punchcard_bucketName": Object {
              "Ref": "ToS3DeliveryStreamBucket410C5594",
            },
            "punchcard_bucket_bucketName": Object {
              "Ref": "ToGlueBucket21D24ECF",
            },
            "punchcard_catalogId": Object {
              "Ref": "AWS::AccountId",
            },
            "punchcard_databaseName": Object {
              "Ref": "DatabaseB269D8BB",
            },
            "punchcard_tableName": Object {
              "Ref": "ToGlueTableCEC90A28",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "ToGlueToTableServiceRole53B96987",
            "Arn",
          ],
        },
        "Runtime": "nodejs10.x",
        "Timeout": 10,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ToGlueToTableServiceRole53B96987": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ToGlueToTableServiceRoleDefaultPolicyBE45ED6E": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "glue:BatchCreatePartition",
                "glue:BatchDeletePartition",
                "glue:CreatePartition",
                "glue:DeletePartition",
                "glue:UpdatePartition",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":glue:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":table/",
                      Object {
                        "Ref": "DatabaseB269D8BB",
                      },
                      "/",
                      Object {
                        "Ref": "ToGlueTableCEC90A28",
                      },
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":glue:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":database/",
                      Object {
                        "Ref": "DatabaseB269D8BB",
                      },
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":glue:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":catalog",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "ToGlueBucket21D24ECF",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "ToGlueBucket21D24ECF",
                          "Arn",
                        ],
                      },
                      "/my_table/",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "ToGlueBucket21D24ECF",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "ToGlueBucket21D24ECF",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "ToS3DeliveryStreamBucket410C5594",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "ToS3DeliveryStreamBucket410C5594",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ToGlueToTableServiceRoleDefaultPolicyBE45ED6E",
        "Roles": Array [
          Object {
            "Ref": "ToGlueToTableServiceRole53B96987",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ToS3DeliveryStream464A5060": Object {
      "Properties": Object {
        "DeliveryStreamType": "KinesisStreamAsSource",
        "ExtendedS3DestinationConfiguration": Object {
          "BucketARN": Object {
            "Fn::GetAtt": Array [
              "ToS3DeliveryStreamBucket410C5594",
              "Arn",
            ],
          },
          "BufferingHints": Object {
            "IntervalInSeconds": 60,
            "SizeInMBs": 64,
          },
          "CompressionFormat": "GZIP",
          "Prefix": "",
          "ProcessingConfiguration": Object {
            "Enabled": true,
            "Processors": Array [
              Object {
                "Parameters": Array [
                  Object {
                    "ParameterName": "LambdaArn",
                    "ParameterValue": Object {
                      "Fn::GetAtt": Array [
                        "ToS3ValidatorProcessorD6994816",
                        "Arn",
                      ],
                    },
                  },
                  Object {
                    "ParameterName": "NumberOfRetries",
                    "ParameterValue": "3",
                  },
                ],
                "Type": "Lambda",
              },
            ],
          },
          "RoleARN": Object {
            "Fn::GetAtt": Array [
              "ToS3DeliveryStreamKinesisRole01962BE0",
              "Arn",
            ],
          },
        },
        "KinesisStreamSourceConfiguration": Object {
          "KinesisStreamARN": Object {
            "Fn::GetAtt": Array [
              "Stream790BDEE4",
              "Arn",
            ],
          },
          "RoleARN": Object {
            "Fn::GetAtt": Array [
              "ToS3DeliveryStreamKinesisRole01962BE0",
              "Arn",
            ],
          },
        },
      },
      "Type": "AWS::KinesisFirehose::DeliveryStream",
    },
    "ToS3DeliveryStreamBucket410C5594": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "ToS3DeliveryStreamBucketNotifications126A2310": Object {
      "Properties": Object {
        "BucketName": Object {
          "Ref": "ToS3DeliveryStreamBucket410C5594",
        },
        "NotificationConfiguration": Object {
          "LambdaFunctionConfigurations": Array [
            Object {
              "Events": Array [
                "s3:ObjectCreated:*",
              ],
              "LambdaFunctionArn": Object {
                "Fn::GetAtt": Array [
                  "ToGlueToTableCC856D42",
                  "Arn",
                ],
              },
            },
          ],
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3BucketNotifications",
    },
    "ToS3DeliveryStreamKinesisRole01962BE0": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "firehose.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ToS3DeliveryStreamKinesisRoleDefaultPolicyB68270DC": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "kinesis:DescribeStreamSummary",
                "kinesis:GetRecords",
                "kinesis:GetShardIterator",
                "kinesis:ListShards",
                "kinesis:SubscribeToShard",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "Stream790BDEE4",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "kms:Decrypt",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "StreamKey238BEC37",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "kinesis:DescribeStream",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "Stream790BDEE4",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "ToS3DeliveryStreamBucket410C5594",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "ToS3DeliveryStreamBucket410C5594",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "ToS3ValidatorProcessorD6994816",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ToS3DeliveryStreamKinesisRoleDefaultPolicyB68270DC",
        "Roles": Array [
          Object {
            "Ref": "ToS3DeliveryStreamKinesisRole01962BE0",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ToS3ValidatorProcessorD6994816": Object {
      "Properties": Object {
        "Code": Object {
          "ZipFile": "exports.handler = function(){ throw new Error(\\"Mocked code is running, oops!\\");}",
        },
        "Environment": Object {
          "Variables": Object {
            "entrypoint_id": "4",
            "is_runtime": "true",
          },
        },
        "Handler": "index.handler",
        "MemorySize": 256,
        "Role": Object {
          "Fn::GetAtt": Array [
            "ToS3ValidatorProcessorServiceRole49E084BB",
            "Arn",
          ],
        },
        "Runtime": "nodejs10.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ToS3ValidatorProcessorServiceRole49E084BB": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "TopicBFC7AF6E": Object {
      "Type": "AWS::SNS::Topic",
    },
  },
}
`;
